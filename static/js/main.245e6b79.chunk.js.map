{"version":3,"sources":["components/Button/index.js","components/Table/index.js","components/Search/index.js","constants/index.js","components/App/index.js","serviceWorker.js","components/Javascript/index.js","components/Python/index.js","index.js"],"names":["Button","_ref","onClick","children","_ref$className","className","react_default","a","createElement","defaultProps","Loading","Sorts","_ref2","sortKey","onSort","activeSortKey","sortClass","push","Button_Button","join","SORTS","NONE","list","TITLE","sortBy","AUTHOR","Table","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","isSortReverse","bind","assertThisInitialized","setState","_this$props","result","removeItem","_this$state","sortedList","reverseSortedList","reverse","Button_Sorts","map","i","key","objectID","href","url","title","author","type","Component","Search","input","focus","onChange","value","onSubmit","FormGroup","style","fontWeight","border","width","ref","node","DEFAULT_QUERY","PATH_BASE","PARAM_HPP","concat","console","log","App","results","searchKey","searchTerm","isLoading","searchValue","fetchTopStories","setTopStories","hits","page","prevState","oldHits","updateHits","toConsumableArray","objectSpread","defineProperty","updateTopStories","_this2","fetch","method","headers","Accept","then","response","json","catch","e","event","checkTopStoriesSearchTerm","preventDefault","id","_results$searchKey","updatedList","filter","item","target","_this3","_this$state2","Grid","fluid","Row","components_Search","components_Table","ButtonWithLoading","rest","objectWithoutProperties","Button_Loading","Boolean","window","location","hostname","match","Javascript","Javascript_ButtonWithLoading","withLoading","Python","Python_ButtonWithLoading","ReactDOM","render","BrowserRouter","basename","Navbar","Header","Brand","Link","to","Toggle","Collapse","Nav","NavItem","NavLink","exact","activeClassName","Route","path","component","javascript","python","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.245e6b79.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nexport const Button = ({ onClick, children, className = '' }) =>\r\n    <button\r\n        className={className}\r\n        onClick={onClick}>\r\n        {children}\r\n    </button>\r\n\r\nButton.propTypes = {\r\n    onClick: PropTypes.func,\r\n    className: PropTypes.string,\r\n    children: PropTypes.node\r\n}\r\n\r\nButton.defaultProps = {\r\n    className: ''\r\n}\r\n\r\nexport const Loading = () =>\r\n    <div><h2> Loading . . .</h2></div>\r\n\r\n\r\nexport const Sorts = ({ sortKey, onSort, children, className, activeSortKey }) => {\r\n    const sortClass = ['btn default'];\r\n\r\n    if (sortKey === activeSortKey) {\r\n        sortClass.push('btn btn-primary');\r\n    }\r\n\r\n    return (\r\n        <Button\r\n            className={sortClass.join(' ')}\r\n            onClick={() => onSort(sortKey)}>{children}\r\n        </Button>\r\n    )\r\n}","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { sortBy } from 'lodash';\r\nimport {Button, Sorts} from '../Button/index';\r\n\r\nconst SORTS = {\r\n    NONE: list => list,\r\n    // the arguments of sortBy : a list to sort on , and the option to sort : sort the list based on title \r\n    TITLE: list => sortBy(list, \"title\"),\r\n    AUTHOR: list => sortBy(list, \"author\")\r\n}\r\n\r\n\r\nclass Table extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            sortKey: \"NONE\",\r\n            isSortReverse: false\r\n        }\r\n\r\n        this.onSort = this.onSort.bind(this);\r\n    }\r\n\r\n\r\n    onSort(sortKey) {\r\n        const isSortReverse = this.state.sortKey === sortKey && !this.state.isSortReverse;\r\n        this.setState({ sortKey, isSortReverse });\r\n    }\r\n\r\n    render() {\r\n\r\n        const { result, removeItem } = this.props;\r\n        const { sortKey, isSortReverse } = this.state;\r\n        const sortedList = SORTS[sortKey](result);\r\n        const reverseSortedList = isSortReverse ? sortedList.reverse() : sortedList;\r\n\r\n        return (\r\n            <div>\r\n                <div className=\"text-center\">\r\n                    <Sorts\r\n                        className=\"btn btn-xs btn-default sortBtn\"\r\n                        sortKey={'NONE'}\r\n                        onSort={this.onSort}\r\n                        activeSortKey={sortKey}\r\n                    >\r\n                        Sort by Default\r\n        </Sorts>\r\n\r\n                    <Sorts\r\n                        className=\"btn btn-xs btn-default sortBtn\"\r\n                        sortKey={'TITLE'}\r\n                        onSort={this.onSort}\r\n                        activeSortKey={sortKey}\r\n                    >\r\n                        Sort by Title\r\n        </Sorts>\r\n\r\n                    <Sorts\r\n                        className=\"btn btn-xs btn-default sortBtn\"\r\n                        sortKey={'AUTHOR'}\r\n                        onSort={this.onSort}\r\n                        activeSortKey={sortKey}\r\n                    >\r\n                        Sort by Author\r\n        </Sorts>\r\n                    <hr />\r\n                </div>\r\n\r\n                {\r\n                    reverseSortedList.map(i =>\r\n                        <div key={i.objectID}>\r\n                            <h1><a href={i.url}> {i.title}</a> by {i.author}</h1>\r\n                            <h4>{i.author} Author | {i.title} Title </h4>\r\n                            <Button\r\n                                type=\"button\"\r\n                                onClick={() => removeItem(i.objectID)}> Remove </Button>\r\n                        </div>\r\n                    )\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nTable.propTypes = {\r\n    result: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n            objectID: PropTypes.string.isRequired,\r\n            author: PropTypes.string,\r\n            url: PropTypes.string,\r\n        })\r\n    ).isRequired,\r\n    removeItem: PropTypes.func.isRequired\r\n}\r\n\r\nexport default Table;","import React, { Component } from 'react';\r\nimport { FormGroup } from 'react-bootstrap'\r\nimport {Button} from '../Button/index';\r\n\r\nclass Search extends Component {\r\n    componentDidMount() {\r\n        this.input.focus();\r\n    }\r\n\r\n    render() {\r\n        const { onChange, value, children, onSubmit } = this.props;\r\n        return (\r\n            <form onSubmit={onSubmit}>\r\n                <FormGroup>\r\n                    <h1 style={{ fontWeight: 'bold' }}>{children}</h1><hr style={{ border: '2px solid black', width: '100px' }} />\r\n                    <div className=\"input-group\">\r\n                        <input\r\n                            className=\"form-control width100 searchForm\"\r\n                            type=\"text\"\r\n                            onChange={onChange}\r\n                            value={value}\r\n                            ref={(node) => { this.input = node }}\r\n                        />\r\n                        <span className=\"input-group-btn\">\r\n                            <Button className=\"btn btn-primary searchBtn\"\r\n                                type=\"submmit\"\r\n                            >\r\n                                Search\r\n                            </Button>\r\n                        </span>\r\n                    </div>\r\n                </FormGroup>\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Search;","export const DEFAULT_QUERY = 'react';\r\nexport const DEFAULT_PAGE = 0;\r\nexport const DEFAULT_HPP = 10;\r\n\r\nexport const PATH_BASE = 'https://hn.algolia.com/api/v1';\r\nexport const PATH_SEARCH = '/search';\r\nexport const PARAM_SEARCH = 'query=';\r\nexport const PARAM_PAGE = 'page=';\r\nexport const PARAM_HPP = 'hitsPerPage=';","import React, { Component } from 'react';\r\nimport { Grid, Row } from 'react-bootstrap'\r\nimport Table from '../Table/index';\r\nimport {Button, Loading} from '../Button/index';\r\nimport Search from '../Search/index';\r\n\r\nimport {\r\n    DEFAULT_QUERY,\r\n    DEFAULT_PAGE,\r\n    DEFAULT_HPP,\r\n    PATH_BASE,\r\n    PATH_SEARCH,\r\n    PARAM_SEARCH,\r\n    PARAM_PAGE,\r\n    PARAM_HPP\r\n} from '../../constants/index.js'\r\n\r\n\r\nconst url = `${PATH_BASE}${PATH_SEARCH}?${PARAM_SEARCH}${DEFAULT_QUERY}&${PARAM_PAGE}&${PARAM_HPP}${DEFAULT_HPP}`;\r\nconsole.log(url);\r\n\r\nconst withLoading = (Component) => ({ isLoading, ...rest }) =>\r\n    isLoading ? <Loading /> : <Component {...rest} />\r\n\r\nconst updateTopStories = (hits, page) => prevState => {\r\n    const { searchKey, results } = prevState;\r\n    const oldHits = results && results[searchKey] ? results[searchKey].hits : [];\r\n    const updateHits = [...oldHits, ...hits];\r\n\r\n    return {\r\n        results: { ...results, [searchKey]: { hits: updateHits, page } },\r\n        isLoading: false\r\n    }\r\n\r\n}\r\n\r\n\r\nclass App extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            results: null,\r\n            searchKey: '',\r\n            searchTerm: DEFAULT_QUERY,\r\n            isLoading: false\r\n        }\r\n        // binding the functions to this (app component)\r\n        this.removeItem = this.removeItem.bind(this);\r\n        this.searchValue = this.searchValue.bind(this);\r\n        this.fetchTopStories = this.fetchTopStories.bind(this);\r\n        this.setTopStories = this.setTopStories.bind(this);\r\n        this.onSubmit = this.onSubmit.bind(this);\r\n    }\r\n\r\n\r\n    checkTopStoriesSearchTerm(searchTerm) {\r\n        return !this.state.results[searchTerm];\r\n    }\r\n\r\n    // set the top stories. Gets the results and pass it to the setState()\r\n    setTopStories(result) {\r\n        const { hits, page } = result;\r\n        this.setState(updateTopStories(hits, page));\r\n    }\r\n\r\n    // FETCH DATA IN API BASED ON THE sEARCHtERM THAT WE USED BEFORE\r\n    fetchTopStories(searchTerm, page) {\r\n        this.setState({ isLoading: true });\r\n        fetch(`${PATH_BASE}${PATH_SEARCH}?${PARAM_SEARCH}${searchTerm}&${PARAM_PAGE}${page}&${PARAM_HPP}${DEFAULT_HPP}`, {\r\n            // mode: 'opaque',\r\n            method: 'GET',\r\n            headers: {\r\n                Accept: 'application/json',\r\n            }\r\n        })\r\n            .then(response => {\r\n                if (response != null) {\r\n                    response.json().then(json => {\r\n                        console.log(json);\r\n                        this.setTopStories(json)\r\n                    });\r\n                }\r\n            })\r\n            .catch(e => e);\r\n    }\r\n\r\n    // component DID MOUNT >> lifecycle method\r\n    // runs once the component is mounted but before render function runs\r\n    componentDidMount() {\r\n        const { searchTerm } = this.state;\r\n        this.setState({ searchKey: searchTerm });\r\n        this.fetchTopStories(searchTerm, DEFAULT_PAGE);\r\n    }\r\n\r\n    // on search submit function\r\n    onSubmit(event) {\r\n        const { searchTerm } = this.state;\r\n        this.setState({ searchKey: searchTerm });\r\n        if (this.checkTopStoriesSearchTerm(searchTerm)) {\r\n            this.fetchTopStories(searchTerm, DEFAULT_PAGE);\r\n        }\r\n        event.preventDefault();\r\n    }\r\n\r\n\r\n    removeItem(id) {\r\n        const { results, searchKey } = this.state;\r\n        const { hits, page } = results[searchKey];\r\n        const isNotId = item => item.objectID !== id;\r\n        const updatedList = hits.filter(isNotId);\r\n        // this.setState({ result: Object.assign({}, this.state.result, {hits: updatedList}) });\r\n        this.setState({ results: { ...results, [searchKey]: { hits: updatedList, page } } });\r\n        console.log(updatedList);\r\n    }\r\n\r\n    searchValue(event) {\r\n        this.setState({ searchTerm: event.target.value });\r\n    }\r\n\r\n    render() {\r\n        const { results, searchTerm, searchKey, isLoading } = this.state;\r\n        const page = (results && results[searchKey] && results[searchKey].page) || 0;\r\n        const list = (results && results[searchKey] && results[searchKey].hits) || [];\r\n        return (\r\n            <div className=\"App \">\r\n                <Grid fluid>\r\n                    <Row>\r\n                        <div className=\"jumbotron text-center\">\r\n                            <Search\r\n                                onChange={this.searchValue}\r\n                                value={searchTerm}\r\n                                onSubmit={this.onSubmit}\r\n                            >NEWSAPP</Search>\r\n                        </div>\r\n                    </Row>\r\n                </Grid>\r\n                <Grid>\r\n                    <Row>\r\n                        <Table\r\n                            result={list}\r\n                            removeItem={this.removeItem}\r\n                        />\r\n                        <div className=\"text-center alert\">\r\n                            <ButtonWithLoading\r\n                                isLoading={isLoading}\r\n                                className=\"btn btn-success\"\r\n                                onClick={() => this.fetchTopStories(searchTerm, page + 1)}>\r\n                                Load More\r\n            </ButtonWithLoading>\r\n                        </div>\r\n                    </Row>\r\n                </Grid>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nconst ButtonWithLoading = withLoading(Button);\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component } from 'react';\r\nimport { Grid, Row } from 'react-bootstrap'\r\nimport Table from '../Table/index';\r\nimport {Button, Loading} from '../Button/index';\r\n\r\nimport {\r\n    DEFAULT_QUERY,\r\n    DEFAULT_PAGE,\r\n    DEFAULT_HPP,\r\n    PATH_BASE,\r\n    PATH_SEARCH,\r\n    PARAM_SEARCH,\r\n    PARAM_PAGE,\r\n    PARAM_HPP\r\n} from '../../constants/index.js'\r\n\r\n\r\nconst url = `${PATH_BASE}${PATH_SEARCH}?${PARAM_SEARCH}${DEFAULT_QUERY}&${PARAM_PAGE}&${PARAM_HPP}${DEFAULT_HPP}`;\r\nconsole.log(url);\r\n\r\nconst withLoading = (Component) => ({ isLoading, ...rest }) =>\r\n    isLoading ? <Loading /> : <Component {...rest} />\r\n\r\nconst updateTopStories = (hits, page) => prevState => {\r\n    const { searchKey, results } = prevState;\r\n    const oldHits = results && results[searchKey] ? results[searchKey].hits : [];\r\n    const updateHits = [...oldHits, ...hits];\r\n\r\n    return {\r\n        results: { ...results, [searchKey]: { hits: updateHits, page } },\r\n        isLoading: false\r\n    }\r\n\r\n}\r\n\r\n\r\nclass Javascript extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            results: null,\r\n            searchKey: '',\r\n            searchTerm: 'javascript',\r\n            isLoading: false\r\n        }\r\n        // binding the functions to this (app component)\r\n        this.removeItem = this.removeItem.bind(this);\r\n        this.searchValue = this.searchValue.bind(this);\r\n        this.fetchTopStories = this.fetchTopStories.bind(this);\r\n        this.setTopStories = this.setTopStories.bind(this);\r\n        this.onSubmit = this.onSubmit.bind(this);\r\n    }\r\n\r\n\r\n    checkTopStoriesSearchTerm(searchTerm) {\r\n        return !this.state.results[searchTerm];\r\n    }\r\n\r\n    // set the top stories. Gets the results and pass it to the setState()\r\n    setTopStories(result) {\r\n        const { hits, page } = result;\r\n        this.setState(updateTopStories(hits, page));\r\n    }\r\n\r\n    // FETCH DATA IN API BASED ON THE sEARCHtERM THAT WE USED BEFORE\r\n    fetchTopStories(searchTerm, page) {\r\n        this.setState({ isLoading: true });\r\n        fetch(`${PATH_BASE}${PATH_SEARCH}?${PARAM_SEARCH}${searchTerm}&${PARAM_PAGE}${page}&${PARAM_HPP}${DEFAULT_HPP}`, {\r\n            // mode: 'opaque',\r\n            method: 'GET',\r\n            headers: {\r\n                Accept: 'application/json',\r\n            }\r\n        })\r\n            .then(response => {\r\n                if (response != null) {\r\n                    response.json().then(json => {\r\n                        console.log(json);\r\n                        this.setTopStories(json)\r\n                    });\r\n                }\r\n            })\r\n            .catch(e => e);\r\n    }\r\n\r\n    // component DID MOUNT >> lifecycle method\r\n    // runs once the component is mounted but before render function runs\r\n    componentDidMount() {\r\n        const { searchTerm } = this.state;\r\n        this.setState({ searchKey: searchTerm });\r\n        this.fetchTopStories(searchTerm, DEFAULT_PAGE);\r\n    }\r\n\r\n    // on search submit function\r\n    onSubmit(event) {\r\n        const { searchTerm } = this.state;\r\n        this.setState({ searchKey: searchTerm });\r\n        if (this.checkTopStoriesSearchTerm(searchTerm)) {\r\n            this.fetchTopStories(searchTerm, DEFAULT_PAGE);\r\n        }\r\n        event.preventDefault();\r\n    }\r\n\r\n\r\n    removeItem(id) {\r\n        const { results, searchKey } = this.state;\r\n        const { hits, page } = results[searchKey];\r\n        const isNotId = item => item.objectID !== id;\r\n        const updatedList = hits.filter(isNotId);\r\n        // this.setState({ result: Object.assign({}, this.state.result, {hits: updatedList}) });\r\n        this.setState({ results: { ...results, [searchKey]: { hits: updatedList, page } } });\r\n        console.log(updatedList);\r\n    }\r\n\r\n    searchValue(event) {\r\n        this.setState({ searchTerm: event.target.value });\r\n    }\r\n\r\n    render() {\r\n        const { results, searchTerm, searchKey, isLoading } = this.state;\r\n        const page = (results && results[searchKey] && results[searchKey].page) || 0;\r\n        const list = (results && results[searchKey] && results[searchKey].hits) || [];\r\n        return (\r\n            <div className=\"App \">\r\n                <Grid>\r\n                    <Row>\r\n                        <Table\r\n                            result={list}\r\n                            removeItem={this.removeItem}\r\n                        />\r\n                        <div className=\"text-center alert\">\r\n                            <ButtonWithLoading\r\n                                isLoading={isLoading}\r\n                                className=\"btn btn-success\"\r\n                                onClick={() => this.fetchTopStories(searchTerm, page + 1)}>\r\n                                Load More\r\n            </ButtonWithLoading>\r\n                        </div>\r\n                    </Row>\r\n                </Grid>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nconst ButtonWithLoading = withLoading(Button);\r\n\r\nexport default Javascript;\r\n","import React, { Component } from 'react';\r\nimport { Grid, Row } from 'react-bootstrap'\r\nimport Table from '../Table/index';\r\nimport {Button, Loading} from '../Button/index';\r\n\r\nimport {\r\n    DEFAULT_QUERY,\r\n    DEFAULT_PAGE,\r\n    DEFAULT_HPP,\r\n    PATH_BASE,\r\n    PATH_SEARCH,\r\n    PARAM_SEARCH,\r\n    PARAM_PAGE,\r\n    PARAM_HPP\r\n} from '../../constants/index.js'\r\n\r\n\r\nconst url = `${PATH_BASE}${PATH_SEARCH}?${PARAM_SEARCH}${DEFAULT_QUERY}&${PARAM_PAGE}&${PARAM_HPP}${DEFAULT_HPP}`;\r\nconsole.log(url);\r\n\r\nconst withLoading = (Component) => ({ isLoading, ...rest }) =>\r\n    isLoading ? <Loading /> : <Component {...rest} />\r\n\r\nconst updateTopStories = (hits, page) => prevState => {\r\n    const { searchKey, results } = prevState;\r\n    const oldHits = results && results[searchKey] ? results[searchKey].hits : [];\r\n    const updateHits = [...oldHits, ...hits];\r\n\r\n    return {\r\n        results: { ...results, [searchKey]: { hits: updateHits, page } },\r\n        isLoading: false\r\n    }\r\n\r\n}\r\n\r\n\r\nclass Python extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            results: null,\r\n            searchKey: '',\r\n            searchTerm: 'python',\r\n            isLoading: false\r\n        }\r\n        // binding the functions to this (app component)\r\n        this.removeItem = this.removeItem.bind(this);\r\n        this.searchValue = this.searchValue.bind(this);\r\n        this.fetchTopStories = this.fetchTopStories.bind(this);\r\n        this.setTopStories = this.setTopStories.bind(this);\r\n        this.onSubmit = this.onSubmit.bind(this);\r\n    }\r\n\r\n\r\n    checkTopStoriesSearchTerm(searchTerm) {\r\n        return !this.state.results[searchTerm];\r\n    }\r\n\r\n    // set the top stories. Gets the results and pass it to the setState()\r\n    setTopStories(result) {\r\n        const { hits, page } = result;\r\n        this.setState(updateTopStories(hits, page));\r\n    }\r\n\r\n    // FETCH DATA IN API BASED ON THE sEARCHtERM THAT WE USED BEFORE\r\n    fetchTopStories(searchTerm, page) {\r\n        this.setState({ isLoading: true });\r\n        fetch(`${PATH_BASE}${PATH_SEARCH}?${PARAM_SEARCH}${searchTerm}&${PARAM_PAGE}${page}&${PARAM_HPP}${DEFAULT_HPP}`, {\r\n            // mode: 'opaque',\r\n            method: 'GET',\r\n            headers: {\r\n                Accept: 'application/json',\r\n            }\r\n        })\r\n            .then(response => {\r\n                if (response != null) {\r\n                    response.json().then(json => {\r\n                        console.log(json);\r\n                        this.setTopStories(json)\r\n                    });\r\n                }\r\n            })\r\n            .catch(e => e);\r\n    }\r\n\r\n    // component DID MOUNT >> lifecycle method\r\n    // runs once the component is mounted but before render function runs\r\n    componentDidMount() {\r\n        const { searchTerm } = this.state;\r\n        this.setState({ searchKey: searchTerm });\r\n        this.fetchTopStories(searchTerm, DEFAULT_PAGE);\r\n    }\r\n\r\n    // on search submit function\r\n    onSubmit(event) {\r\n        const { searchTerm } = this.state;\r\n        this.setState({ searchKey: searchTerm });\r\n        if (this.checkTopStoriesSearchTerm(searchTerm)) {\r\n            this.fetchTopStories(searchTerm, DEFAULT_PAGE);\r\n        }\r\n        event.preventDefault();\r\n    }\r\n\r\n\r\n    removeItem(id) {\r\n        const { results, searchKey } = this.state;\r\n        const { hits, page } = results[searchKey];\r\n        const isNotId = item => item.objectID !== id;\r\n        const updatedList = hits.filter(isNotId);\r\n        // this.setState({ result: Object.assign({}, this.state.result, {hits: updatedList}) });\r\n        this.setState({ results: { ...results, [searchKey]: { hits: updatedList, page } } });\r\n        console.log(updatedList);\r\n    }\r\n\r\n    searchValue(event) {\r\n        this.setState({ searchTerm: event.target.value });\r\n    }\r\n\r\n    render() {\r\n        const { results, searchTerm, searchKey, isLoading } = this.state;\r\n        const page = (results && results[searchKey] && results[searchKey].page) || 0;\r\n        const list = (results && results[searchKey] && results[searchKey].hits) || [];\r\n        return (\r\n            <div className=\"App \">\r\n                <Grid>\r\n                    <Row>\r\n                        <Table\r\n                            result={list}\r\n                            removeItem={this.removeItem}\r\n                        />\r\n                        <div className=\"text-center alert\">\r\n                            <ButtonWithLoading\r\n                                isLoading={isLoading}\r\n                                className=\"btn btn-success\"\r\n                                onClick={() => this.fetchTopStories(searchTerm, page + 1)}>\r\n                                Load More\r\n            </ButtonWithLoading>\r\n                        </div>\r\n                    </Row>\r\n                </Grid>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nconst ButtonWithLoading = withLoading(Button);\r\n\r\nexport default Python;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport { BrowserRouter as Router, Route, Link, NavLink } from 'react-router-dom';\nimport { Navbar, Nav, NavItem } from 'react-bootstrap';\nimport * as serviceWorker from './serviceWorker';\nimport javascript from './components/Javascript';\nimport python from './components/Python';\n\nconst Root = () =>\n    <Router basename=\"/react-application/\">\n        <div>\n\n            <Navbar>\n                <Navbar.Header>\n                    <Navbar.Brand>\n                        <Link to=\"/\">NEWSAPP</Link>\n                    </Navbar.Brand>\n                    <Navbar.Toggle/>\n                </Navbar.Header>\n\n                <Navbar.Collapse>\n                <Nav>\n                    <NavItem>\n                        <NavLink exact to=\"/\" activeClassName=\"active\">Home</NavLink>\n                    </NavItem>\n                    <NavItem>\n                        <NavLink exact to=\"/javascript\" activeClassName=\"active\">Javascript</NavLink>\n                    </NavItem>\n                    <NavItem>\n                        <NavLink exact to=\"/python\" activeClassName=\"active\">Python</NavLink>\n                    </NavItem>\n                </Nav>\n                </Navbar.Collapse>\n                \n            </Navbar>\n            <Route exact path=\"/\" component={App} />\n            <Route exact path=\"/javascript\" component={javascript} />\n            <Route exact path=\"/python\" component={python} />\n        </div>\n    </Router>\n\nconst About = () =>\n    <div>\n        <h1>This is about page ...</h1>\n    </div>\n\n//  Root mban edhe App edhe About \nReactDOM.render(<Root />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}